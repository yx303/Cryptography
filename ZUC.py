# coding=utf-8
import re

s0 = [['3e', '72', '5b', '47', 'ca', 'e0', '00', '33', '04', 'd1', '54', '98', '09', 'b9', '6d', 'cb'],
      ['7b', '1b', 'f9', '32', 'af', '9d', '6a', 'a5', 'b8', '2d', 'fc', '1d', '08', '53', '03', '90'],
      ['4d', '4e', '84', '99', 'e4', 'ce', 'd9', '91', 'dd', 'b6', '85', '48', '8b', '29', '6e', 'ac'],
      ['cd', 'c1', 'f8', '1e', '73', '43', '69', 'c6', 'b5', 'bd', 'fd', '39', '63', '20', 'd4', '38'],
      ['76', '7d', 'b2', 'a7', 'cf', 'ed', '57', 'c5', 'f3', '2c', 'bb', '14', '21', '06', '55', '9b'],
      ['e3', 'ef', '5e', '31', '4f', '7f', '5a', 'a4', '0d', '82', '51', '49', '5f', 'ba', '58', '1c'],
      ['4a', '16', 'd5', '17', 'a8', '92', '24', '1f', '8c', 'ff', 'd8', 'ae', '2e', '01', 'd3', 'ad'],
      ['3b', '4b', 'da', '46', 'eb', 'c9', 'de', '9a', '8f', '87', 'd7', '3a', '80', '6f', '2f', 'c8'],
      ['b1', 'b4', '37', 'f7', '0a', '22', '13', '28', '7c', 'cc', '3c', '89', 'c7', 'c3', '96', '56'],
      ['07', 'bf', '7e', 'f0', '0b', '2b', '97', '52', '35', '41', '79', '61', 'a6', '4c', '10', 'fe'],
      ['bc', '26', '95', '88', '8a', 'b0', 'a3', 'fb', 'c0', '18', '94', 'f2', 'e1', 'e5', 'e9', '5d'],
      ['d0', 'dc', '11', '66', '64', '5c', 'ec', '59', '42', '75', '12', 'f5', '74', '9c', 'aa', '23'],
      ['0e', '86', 'ab', 'be', '2a', '02', 'e7', '67', 'e6', '44', 'a2', '6c', 'c2', '93', '9f', 'f1'],
      ['f6', 'fa', '36', 'd2', '50', '68', '9e', '62', '71', '15', '3d', 'd6', '40', 'c4', 'e2', '0f'],
      ['8e', '83', '77', '6b', '25', '05', '3f', '0c', '30', 'ea', '70', 'b7', 'a1', 'e8', 'a9', '65'],
      ['8d', '27', '1a', 'db', '81', 'b3', 'a0', 'f4', '45', '7a', '19', 'df', 'ee', '78', '34', '60']]

s1 = [['55', 'c2', '63', '71', '3b', 'c8', '47', '86', '9f', '3c', 'da', '5b', '29', 'aa', 'fd', '77'],
      ['8c', 'c5', '94', '0c', 'a6', '1a', '13', '00', 'e3', 'a8', '16', '72', '40', 'f9', 'f8', '42'],
      ['44', '26', '68', '96', '81', 'd9', '45', '3e', '10', '76', 'c6', 'a7', '8b', '39', '43', 'e1'],
      ['3a', 'b5', '56', '2a', 'c0', '6d', 'b3', '05', '22', '66', 'bf', 'dc', '0b', 'fa', '62', '48'],
      ['dd', '20', '11', '06', '36', 'c9', 'c1', 'cf', 'f6', '27', '52', 'bb', '69', 'f5', 'd4', '87'],
      ['7f', '84', '4c', 'd2', '9c', '57', 'a4', 'bc', '4f', '9a', 'df', 'fe', 'd6', '8d', '7a', 'eb'],
      ['2b', '53', 'd8', '5c', 'a1', '14', '17', 'fb', '23', 'd5', '7d', '30', '67', '73', '08', '09'],
      ['ee', 'b7', '70', '3f', '61', 'b2', '19', '8e', '4e', 'e5', '4b', '93', '8f', '5d', 'db', 'a9'],
      ['ad', 'f1', 'ae', '2e', 'cb', '0d', 'fc', 'f4', '2d', '46', '6e', '1d', '97', 'e8', 'd1', 'e9'],
      ['4d', '37', 'a5', '75', '5e', '83', '9e', 'ab', '82', '9d', 'b9', '1c', 'e0', 'cd', '49', '89'],
      ['01', 'b6', 'bd', '58', '24', 'a2', '5f', '38', '78', '99', '15', '90', '50', 'b8', '95', 'e4'],
      ['d0', '91', 'c7', 'ce', 'ed', '0f', 'b4', '6f', 'a0', 'cc', 'f0', '02', '4a', '79', 'c3', 'de'],
      ['a3', 'ef', 'ea', '51', 'e6', '6b', '18', 'ec', '1b', '2c', '80', 'f7', '74', 'e7', 'ff', '21'],
      ['5a', '6a', '54', '1e', '41', '31', '92', '35', 'c4', '33', '07', '0a', 'ba', '7e', '0e', '34'],
      ['88', 'b1', '98', '7c', 'f3', '3d', '60', '6c', '7b', 'ca', 'd3', '1f', '32', '65', '04', '28'],
      ['64', 'be', '85', '9b', '2f', '59', '8a', 'd7', 'b0', '25', 'ac', 'af', '12', '03', 'e2', 'f2']]

D = ['100010011010111', '010011010111100', '110001001101011', '001001101011110',
     '101011110001001', '011010111100010', '111000100110101', '000100110101111',
     '100110101111000', '010111100010011', '110101111000100', '001101011110001',
     '101111000100110', '011110001001101', '111100010011010', '100011110101100']


def initbin(k, v):
    kl = re.findall('.{2}', k)
    vl = re.findall('.{2}', v)
    st = []
    for i in range(0, 16):
        word = bin(int(kl[i], 16))[2:].zfill(8) + D[i] + bin(int(vl[i], 16))[2:].zfill(8)
        st.append(hex(int(word, 2))[2:].zfill(8))
    return st


def bitreconstruction(st):
    x0 = int(bin(int(st[15], 16))[2:].zfill(31)[0:16] + bin(int(st[14], 16))[2:].zfill(31)[15:31], 2)
    x1 = int(bin(int(st[11], 16))[2:].zfill(31)[15:31] + bin(int(st[9], 16))[2:].zfill(31)[0:16], 2)
    x2 = int(bin(int(st[7], 16))[2:].zfill(31)[15:31] + bin(int(st[5], 16))[2:].zfill(31)[0:16], 2)
    x3 = int(bin(int(st[2], 16))[2:].zfill(31)[15:31] + bin(int(st[0], 16))[2:].zfill(31)[0:16], 2)
    x = [x0, x1, x2, x3]
    return x


def rotl(x, shift):
    return ((x << shift) | (x >> (32 - shift))) & 0xffffffff


def l1(x):
    return hex((x ^ rotl(x, 2) ^ rotl(x, 10) ^ rotl(x, 18) ^ rotl(x, 24)) & 0xffffffff)[2:].zfill(8)


def l2(x):
    return hex((x ^ rotl(x, 8) ^ rotl(x, 14) ^ rotl(x, 22) ^ rotl(x, 30)) & 0xffffffff)[2:].zfill(8)


def subbyte(w):
    r0 = s0[int(w[0], 16)][int(w[1], 16)]
    r1 = s1[int(w[2], 16)][int(w[3], 16)]
    r2 = s0[int(w[4], 16)][int(w[5], 16)]
    r3 = s1[int(w[6], 16)][int(w[7], 16)]
    r = r0 + r1 + r2 + r3
    return r


def f(x, r1, r2):
    modulus = 2 ** 32
    w = ((x[0] ^ r1) + r2) % modulus
    w1 = (x[1] + r1) % modulus
    w2 = x[2] ^ r2
    r1 = int(subbyte(l1(int(bin(w1)[2:].zfill(32)[16:32] + bin(w2)[2:].zfill(32)[0:16], 2))), 16)
    r2 = int(subbyte(l2(int(bin(w2)[2:].zfill(32)[16:32] + bin(w1)[2:].zfill(32)[0:16], 2))), 16)
    return w, r1, r2


def lfsr(w, st, flag):
    modulus = 2 ** 31 - 1
    s16 = 2 ** 15 * int(st[15], 16) + 2 ** 17 * int(st[13], 16) + 2 ** 21 * int(st[10], 16) + \
          2 ** 20 * int(st[4], 16) + (1 + 2 ** 8) * int(st[0], 16)
    if flag == 1:
        s16 = (s16 + w) % modulus
    else:
        s16 = s16 % modulus
    if s16 == 0:
        s16 = modulus
    st.remove(st[0])
    st.append(hex(s16)[2:].zfill(8))
    return st


def init(k, v):
    st = initbin(k, v)
    r1, r2 = 0, 0
    for i in range(32):
        x = bitreconstruction(st)
        w, r1, r2 = f(x, r1, r2)
        st = lfsr(w >> 1, st, 1)
        # print('X0:', hex(x[0])[2:].zfill(8), 'X1:', hex(x[1])[2:].zfill(8), 'X2:', hex(x[2])[2:].zfill(8),
        #       'X3:', hex(x[3])[2:].zfill(8), 'R1:', hex(r1)[2:].zfill(8), 'R2:', hex(r2)[2:].zfill(8),
        #       'W:', hex(w)[2:].zfill(8), 'S15:', st[15])
    return st, r1, r2


def work(st, r1, r2):
    x = bitreconstruction(st)
    w, r1, r2 = f(x, r1, r2)
    z = w ^ x[3]
    st = lfsr(w >> 1, st, 0)
    return st, r1, r2, x, z


if __name__ == '__main__':
    key = '3d4c4be96a82fdaeb58f641db17b455b'
    iv = '84319aa8de6915ca1f6bda6bfbd8c766'
    St, R1, R2 = init(key, iv)
    print("")
    St, R1, R2, X, Z = work(St, R1, R2)
    print('X0:', hex(X[0])[2:].zfill(8), 'X1:', hex(X[1])[2:].zfill(8), 'X2:', hex(X[2])[2:].zfill(8),
          'X3:', hex(X[3])[2:].zfill(8), 'R1:', hex(R1)[2:].zfill(8), 'R2:', hex(R2)[2:].zfill(8),
          "\033[1;31mZ:", hex(Z)[2:].zfill(8), "\033[0m", 'S15:', St[15])
    St, R1, R2, X, Z = work(St, R1, R2)
    print('X0:', hex(X[0])[2:].zfill(8), 'X1:', hex(X[1])[2:].zfill(8), 'X2:', hex(X[2])[2:].zfill(8),
          'X3:', hex(X[3])[2:].zfill(8), 'R1:', hex(R1)[2:].zfill(8), 'R2:', hex(R2)[2:].zfill(8),
          "\033[1;31mZ:", hex(Z)[2:].zfill(8), "\033[0m", 'S15:', St[15])
    St, R1, R2, X, Z = work(St, R1, R2)
    print('X0:', hex(X[0])[2:].zfill(8), 'X1:', hex(X[1])[2:].zfill(8), 'X2:', hex(X[2])[2:].zfill(8),
          'X3:', hex(X[3])[2:].zfill(8), 'R1:', hex(R1)[2:].zfill(8), 'R2:', hex(R2)[2:].zfill(8),
          "\033[1;31mZ:", hex(Z)[2:].zfill(8), "\033[0m", 'S15:', St[15])
    St, R1, R2, X, Z = work(St, R1, R2)
    print('X0:', hex(X[0])[2:].zfill(8), 'X1:', hex(X[1])[2:].zfill(8), 'X2:', hex(X[2])[2:].zfill(8),
          'X3:', hex(X[3])[2:].zfill(8), 'R1:', hex(R1)[2:].zfill(8), 'R2:', hex(R2)[2:].zfill(8),
          "\033[1;31mZ:", hex(Z)[2:].zfill(8), "\033[0m", 'S15:', St[15])
